// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "warehouse_project/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// ClientRepo is an autogenerated mock type for the clientRepo type
type ClientRepo struct {
	mock.Mock
}

type ClientRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientRepo) EXPECT() *ClientRepo_Expecter {
	return &ClientRepo_Expecter{mock: &_m.Mock}
}

// FindClient provides a mock function with given fields: id
func (_m *ClientRepo) FindClient(id int64) (*model.Client, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindClient")
	}

	var r0 *model.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Client, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientRepo_FindClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClient'
type ClientRepo_FindClient_Call struct {
	*mock.Call
}

// FindClient is a helper method to define mock.On call
//   - id int64
func (_e *ClientRepo_Expecter) FindClient(id interface{}) *ClientRepo_FindClient_Call {
	return &ClientRepo_FindClient_Call{Call: _e.mock.On("FindClient", id)}
}

func (_c *ClientRepo_FindClient_Call) Run(run func(id int64)) *ClientRepo_FindClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientRepo_FindClient_Call) Return(_a0 *model.Client, _a1 error) *ClientRepo_FindClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientRepo_FindClient_Call) RunAndReturn(run func(int64) (*model.Client, error)) *ClientRepo_FindClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientRepo creates a new instance of ClientRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRepo {
	mock := &ClientRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
