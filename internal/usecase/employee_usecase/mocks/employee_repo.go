// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "warehouse_project/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepo is an autogenerated mock type for the employeeRepo type
type EmployeeRepo struct {
	mock.Mock
}

type EmployeeRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *EmployeeRepo) EXPECT() *EmployeeRepo_Expecter {
	return &EmployeeRepo_Expecter{mock: &_m.Mock}
}

// CreateEmployee provides a mock function with given fields: employee
func (_m *EmployeeRepo) CreateEmployee(employee *model.Employee) (*model.Employee, error) {
	ret := _m.Called(employee)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 *model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Employee) (*model.Employee, error)); ok {
		return rf(employee)
	}
	if rf, ok := ret.Get(0).(func(*model.Employee) *model.Employee); ok {
		r0 = rf(employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Employee) error); ok {
		r1 = rf(employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeRepo_CreateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployee'
type EmployeeRepo_CreateEmployee_Call struct {
	*mock.Call
}

// CreateEmployee is a helper method to define mock.On call
//   - employee *model.Employee
func (_e *EmployeeRepo_Expecter) CreateEmployee(employee interface{}) *EmployeeRepo_CreateEmployee_Call {
	return &EmployeeRepo_CreateEmployee_Call{Call: _e.mock.On("CreateEmployee", employee)}
}

func (_c *EmployeeRepo_CreateEmployee_Call) Run(run func(employee *model.Employee)) *EmployeeRepo_CreateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Employee))
	})
	return _c
}

func (_c *EmployeeRepo_CreateEmployee_Call) Return(_a0 *model.Employee, _a1 error) *EmployeeRepo_CreateEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeRepo_CreateEmployee_Call) RunAndReturn(run func(*model.Employee) (*model.Employee, error)) *EmployeeRepo_CreateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployee provides a mock function with given fields: id
func (_m *EmployeeRepo) DeleteEmployee(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmployeeRepo_DeleteEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployee'
type EmployeeRepo_DeleteEmployee_Call struct {
	*mock.Call
}

// DeleteEmployee is a helper method to define mock.On call
//   - id int64
func (_e *EmployeeRepo_Expecter) DeleteEmployee(id interface{}) *EmployeeRepo_DeleteEmployee_Call {
	return &EmployeeRepo_DeleteEmployee_Call{Call: _e.mock.On("DeleteEmployee", id)}
}

func (_c *EmployeeRepo_DeleteEmployee_Call) Run(run func(id int64)) *EmployeeRepo_DeleteEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *EmployeeRepo_DeleteEmployee_Call) Return(_a0 error) *EmployeeRepo_DeleteEmployee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmployeeRepo_DeleteEmployee_Call) RunAndReturn(run func(int64) error) *EmployeeRepo_DeleteEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// FindEmployee provides a mock function with given fields: id
func (_m *EmployeeRepo) FindEmployee(id int64) (*model.Employee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindEmployee")
	}

	var r0 *model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Employee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeRepo_FindEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindEmployee'
type EmployeeRepo_FindEmployee_Call struct {
	*mock.Call
}

// FindEmployee is a helper method to define mock.On call
//   - id int64
func (_e *EmployeeRepo_Expecter) FindEmployee(id interface{}) *EmployeeRepo_FindEmployee_Call {
	return &EmployeeRepo_FindEmployee_Call{Call: _e.mock.On("FindEmployee", id)}
}

func (_c *EmployeeRepo_FindEmployee_Call) Run(run func(id int64)) *EmployeeRepo_FindEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *EmployeeRepo_FindEmployee_Call) Return(_a0 *model.Employee, _a1 error) *EmployeeRepo_FindEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeRepo_FindEmployee_Call) RunAndReturn(run func(int64) (*model.Employee, error)) *EmployeeRepo_FindEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployee provides a mock function with given fields: employee
func (_m *EmployeeRepo) UpdateEmployee(employee *model.Employee) (*model.Employee, error) {
	ret := _m.Called(employee)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployee")
	}

	var r0 *model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Employee) (*model.Employee, error)); ok {
		return rf(employee)
	}
	if rf, ok := ret.Get(0).(func(*model.Employee) *model.Employee); ok {
		r0 = rf(employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Employee) error); ok {
		r1 = rf(employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeRepo_UpdateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployee'
type EmployeeRepo_UpdateEmployee_Call struct {
	*mock.Call
}

// UpdateEmployee is a helper method to define mock.On call
//   - employee *model.Employee
func (_e *EmployeeRepo_Expecter) UpdateEmployee(employee interface{}) *EmployeeRepo_UpdateEmployee_Call {
	return &EmployeeRepo_UpdateEmployee_Call{Call: _e.mock.On("UpdateEmployee", employee)}
}

func (_c *EmployeeRepo_UpdateEmployee_Call) Run(run func(employee *model.Employee)) *EmployeeRepo_UpdateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Employee))
	})
	return _c
}

func (_c *EmployeeRepo_UpdateEmployee_Call) Return(_a0 *model.Employee, _a1 error) *EmployeeRepo_UpdateEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeRepo_UpdateEmployee_Call) RunAndReturn(run func(*model.Employee) (*model.Employee, error)) *EmployeeRepo_UpdateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmployeeRepo creates a new instance of EmployeeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepo {
	mock := &EmployeeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
